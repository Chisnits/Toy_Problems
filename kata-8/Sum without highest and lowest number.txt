Sum all the numbers of the array (in F# and Haskell you get a list) except the 
highest and the lowest element (the value, not the index!).
(The highest/lowest element is respectively only one element at each edge, even 
if there are more than one with the same value!)
Example:
{ 6, 2, 1, 8, 10 } => 16
{ 1, 1, 11, 2, 3 } => 6

If array is empty, null or None, or if only 1 Element exists, return 0.
Note:In C++ instead null an empty vector is used. In C there is no null. ;-)


SOLUTION: 

function sumArray(array) {
//check to see if array is equal to null, empty string, or only contains 1 item.
    if (array === null)
    {
        return 0;
    }
    else if (array.length < 1)
    {
        return 0;
    }
    else
    {
    //sort the array in order from smallest to largest.
        var sortedArray = array.sort(function(a,b) {return a - b;});
        var sum = 0;
    //starting at the index of 1 (after the smallest number) loop through
    //the sorted array adding each index to the sum.
    //stop the for loop before the last number i using the length - 1.
        for (var i = 1; i < sortedArray.length - 1; i++) {
    //at each iteration, the value at the index will be added to the sum.
            sum += sortedArray[i];
        }
    //return the sum of the added values from the sortedArray.
        return sum;
    }
} 